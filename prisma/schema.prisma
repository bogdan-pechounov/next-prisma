// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// products
model Product {
  id               String     @id @default(uuid())
  title            String
  imgUrl           String
  description      String
  price            Float
  categories       String[]
  brand            String
  salesRank        Json?
  alsoBought       Product[]  @relation("alsoBought")
  alsoBought_      Product[]  @relation("alsoBought")
  alsoViewed       Product[]  @relation("alsoViewed")
  alsoViewed_      Product[]  @relation("alsoViewed")
  boughtTogether   Product[]  @relation("boughtTogether")
  boughtTogether_  Product[]  @relation("boughtTogether")
  buyAfterViewing  Product[]  @relation("buyAfterViewing")
  buyAfterViewing_ Product[]  @relation("buyAfterViewing")
  inCart           CartItem[]
}

//cart
model CartItem {
  id        String  @id @default(uuid())
  user      User?   @relation(fields: [userId], references: [id])
  userId    String
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([userId, productId])
}
